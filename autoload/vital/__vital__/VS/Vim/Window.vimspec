let s:expect = themis#helper('expect')
let s:Buffer = vital#vital#import('VS.Vim.Buffer')
let s:Window = vital#vital#import('VS.Vim.Window')
let s:FloatingWindow = vital#vital#import('VS.Vim.Window.FloatingWindow')

Describe vital#__vital__#VS#Vim#Window

  Before each
    tabnew!
  End

  After each
    tabclose!
  End

  Describe #do

    It should restore modes
      enew!
      let l:winid1 = win_getid()
      call setline(1, 'foo')
      vnew!
      let l:winid2 = win_getid()
      call setline(1, 'bar')

      normal! 1G1|v$
      call s:expect(s:Window.do(l:winid1, { -> getline('1') })).to_equal('foo')
      call s:expect(mode()).to_equal('v')
    End

  End

  Describe #info

    It should return normal window info
      call setline('%', ['foo', 'bar'])
      call cursor([2, 2])
      call s:expect(s:Window.info(win_getid())).to_equal({
      \   'width': winwidth(0),
      \   'height': winheight(0),
      \   'core_width': winwidth(0),
      \   'core_height': winheight(0),
      \   'topline': 1,
      \ })
    End

    It should return floating window info
      if !s:FloatingWindow.is_available()
        return
      endif

      let l:bufnr = s:Buffer.create()
      call setbufline(l:bufnr, 1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

      let l:win = s:FloatingWindow.new()
      call l:win.set_bufnr(l:bufnr)
      call l:win.open({
      \   'border': v:true,
      \   'row': 0,
      \   'col': 0,
      \   'width': 10,
      \   'height': 10,
      \ })

      let l:compat_off = has('nvim') ? 0 : 2
      call s:expect(s:Window.info(l:win._winid)).to_equal({
      \   'width': 10 + l:compat_off,
      \   'height': 10 + l:compat_off,
      \   'core_width': 8 + l:compat_off,
      \   'core_height': 8 + l:compat_off,
      \   'topline': 1,
      \ })

      call l:win.close()
    End

  End

  Describe #is_floating

    It should return correct value with normal window
      call s:expect(s:Window.is_floating(win_getid())).to_equal(v:false)
    End

    It should return correct value with floating window
      if !s:FloatingWindow.is_available()
        return
      endif

      let l:win = s:FloatingWindow.new()
      call l:win.set_bufnr(s:Buffer.create())
      call l:win.open({
      \   'row': 0,
      \   'col': 0,
      \   'width': 10,
      \   'height': 10,
      \ })
      call s:expect(s:Window.is_floating(l:win.get_winid())).to_equal(v:true)
    End

  End

  Describe #scroll

    It should scroll normal window
      vnew!
      resize 5
      call setline(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

      let l:win = win_getid()
      call s:Window.scroll(l:win, 1)
      call s:expect(s:Window.info(l:win).topline).to_equal(1)
      call s:Window.scroll(l:win, s:Window.info(l:win).topline + 4)
      call s:expect(s:Window.info(l:win).topline).to_equal(5)
      call s:Window.scroll(l:win, s:Window.info(l:win).topline + 4)
      call s:expect(s:Window.info(l:win).topline).to_equal(7)
    End

    It should scroll floating window
      if !s:FloatingWindow.is_available()
        return
      endif

      let l:bufnr = s:Buffer.create()
      call setbufline(l:bufnr, 1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])

      let l:win = s:FloatingWindow.new()
      call l:win.set_bufnr(l:bufnr)
      call l:win.open({
      \   'border': v:true,
      \   'row': 0,
      \   'col': 0,
      \   'width': &columns,
      \   'height': 5,
      \ })

      let l:compat_off = has('nvim') ? 2 : 0
      call s:Window.scroll(l:win._winid, 1)
      call s:expect(s:Window.info(l:win._winid).topline).to_equal(1)
      call s:Window.scroll(l:win._winid, s:Window.info(l:win._winid).topline + 4)
      call s:expect(s:Window.info(l:win._winid).topline).to_equal(5)
      call s:Window.scroll(l:win._winid, s:Window.info(l:win._winid).topline + 4)
      call s:expect(s:Window.info(l:win._winid).topline).to_equal(7 + l:compat_off)
    End

  End

End

