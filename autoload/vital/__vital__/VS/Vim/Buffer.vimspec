"
" test
"
let s:expect = themis#helper('expect')
let s:assert = themis#helper('assert')
let s:Buffer = vital#vital#import('VS.Vim.Buffer')

let s:filepath = globpath(&runtimepath, 'autoload/vital/__vital__/VS/Vim/Buffer.vimspec')

Describe vital#__vital__#VS#Vim#Buffer

  Describe #get_line_count

    It should return current buffer's line count
      enew!
      let l:bufnr = bufnr('%')
      call setbufline(l:bufnr, 1, ['a', 'b', 'c'])
      call s:expect(s:Buffer.get_line_count(l:bufnr)).to_equal(3)
    End

    It should return external buffer's line count
      enew!
      let l:bufnr1 = bufnr('%')
      call setbufline(l:bufnr1, 1, ['a'])
      enew!
      let l:bufnr2 = bufnr('%')
      call setbufline(l:bufnr2, 1, ['a', 'b', 'c'])
      buffer #
      call s:expect(l:bufnr1).not.to_equal(l:bufnr2)
      call s:expect(s:Buffer.get_line_count(l:bufnr1)).to_equal(1)
      call s:expect(s:Buffer.get_line_count(l:bufnr2)).to_equal(3)
    End

  End

  Describe #create

    It should create new dummy buffer
      let l:bufnr = s:Buffer.create('VS_Vim_Buffer_create:test')
      call s:expect(bufexists(l:bufnr)).to_equal(1)
      call s:expect(bufloaded(l:bufnr)).to_equal(1)
    End

  End

  Describe #ensure

    It should ensure specified bufname
      let l:bufname = 'VS_Vim_Buffer_ensure:test'
      call s:expect(bufexists(l:bufname)).to_equal(0)
      call s:Buffer.ensure(l:bufname)
      call s:expect(bufexists(l:bufname)).to_equal(1)
    End

  End

  Describe #add

    It should add buffer
      let l:bufname1 = 'VS_Vim_Buffer_badd:test1'
      call s:expect(bufexists(l:bufname1)).to_equal(0)
      call s:Buffer.add(l:bufname1)
      call s:expect(bufexists(l:bufname1)).to_equal(1)

      if exists('*bufadd')
        let l:bufname2 = 'VS_Vim_Buffer_badd:test2'
        badd `=l:bufname2`
        " The 'lnum' is 1 for a buffer added by ':badd' before patch 8.2.1902
        " while it is 0 for a buffer added by 'bufadd()' or ':badd' after the
        " patch.  Skip the checks for 'lnum' entry.
        let l:buf1info = filter(getbufinfo(l:bufname1)[0], 'v:key !~# "name\\|bufnr\\|lnum"')
        let l:buf2info = filter(getbufinfo(l:bufname2)[0], 'v:key !~# "name\\|bufnr\\|lnum"')
        call s:expect(l:buf1info).to_equal(l:buf2info)
      endif
    End

    It does not raise E11 error even in cmdwin (when bufadd() exists)
      if !exists('*bufadd')
        call s:assert.skip('Missing bufadd()')
      endif
      function TestInCmdwin() abort
        call s:expect(getcmdwintype()).not.to_equal('')
        try
          call s:Buffer.add('VS_Vim_Buffer_badd:test_no_throw')
        catch /^Vim\%((\a\+)\)\=:E11:/
          call s:assert.fail('E11 error raised.')
        endtry
        return ''
      endfunction
      nnoremap <expr> @ TestInCmdwin()
      try
        execute "normal q:@\<C-w>q"
      finally
        nunmap @
        delfunction TestInCmdwin
      endtry
    End

  End

  Describe #load

    It should load buffer
      let l:bufnr = s:Buffer.load('test')
      call setbufline(l:bufnr, 1, ['1', '2', '3'])
      call s:expect(getbufline(l:bufnr, '^', '$')).to_equal(['1', '2', '3'])
    End

  End

  Describe #do

    It should do some commands on the specified buffer
      let l:bufnr = s:Buffer.load('VS_Vim_Buffer_do:test')
      call s:Buffer.do(l:bufnr, { -> setbufline('%', 1, 'test') })
      call s:expect(getbufline(l:bufnr, 1)).to_equal(['test'])
    End

  End

  Describe #pseudo

    It should create new pseudo buffer that automatically loaded by autocmd
      let l:bufnr = s:Buffer.pseudo(s:filepath)
      call s:expect(bufloaded(l:bufnr)).to_equal(0)
      execute printf('%sbuffer', l:bufnr)
      call s:expect(bufloaded(l:bufnr)).to_equal(1)
      call s:expect(getbufline(l:bufnr, 2)).to_equal(['" test'])
      call s:Buffer.do(l:bufnr, { -> execute('1,$delete _') })
      execute printf('doautocmd VS_Vim_Buffer_pseudo:%s BufReadCmd %s', l:bufnr, bufname(l:bufnr))
      call s:expect(getbufline(l:bufnr, 2)).not.to_equal(['" test'])
    End

  End

End

