let s:expect = themis#helper('expect')
let s:Option = vital#vital#import('VS.Vim.Option')
let s:TextEdit = vital#vital#import('VS.LSP.TextEdit')
let s:Position = vital#vital#import('VS.LSP.Position')

Describe vital#__vital__#VS#LSP#TextEdit

  Before each
    let s:Restore = s:Option.define({
    \   'foldenable': '1',
    \   'foldmethod': 'manual',
    \ })
  End

  After each
    call s:Restore()
  End

  Describe #apply

    Describe bufname
      It should applied TextEdit to strange name buffer
        call mkdir('/tmp/vital-vs/pages/[id]', 'p')
        call writefile([''], '/tmp/vital-vs/pages/[id]/index.page.tsx')
        edit /tmp/vital-vs/pages/[id]/index.page.tsx
        call s:TextEdit.apply(expand('%:p'), [{
        \  'range': {
        \    'start': {
        \      'line': 0,
        \      'character': 0,
        \    },
        \    'end': {
        \      'line': 0,
        \      'character': 0,
        \    },
        \  },
        \  'newText': 'abcde'
        \ }])
        call s:expect(getbufline('%', 1, '$')).to_equal(['abcde'])
        write
      End
    End

    Describe cursor

      It should fix cursor position (singleline -> singleline)
        call s:apply("abcedfg\nhij|klmn\nopqrstu\n", [1, 3], [{
        \   'start': [1, 3],
        \   'end': [1, 3],
        \   'text': 'foo'
        \ }], "abcedfg\nhijfoo|klmn\nopqrstu\n")
        call s:expect(s:Position.cursor()).to_equal({
        \   'line': 1,
        \   'character': 6,
        \ })
      End

      It should fix cursor position (singleline -> multiline)
        call s:apply("abcedfg\nhij|klmn\nopqrstu\n", [1, 3], [{
        \   'start': [1, 3],
        \   'end': [1, 3],
        \   'text': "foo\nbar"
        \ }], "abcedfg\nhijfoo\nbar|klmn\nopqrstu\n")
        call s:expect(s:Position.cursor()).to_equal({
        \   'line': 2,
        \   'character': 3,
        \ })
      End

      It should fix cursor position (multiline -> multiline)
        call s:apply("abcedfg\nhij|klmn\nopqrstu\n", [1, 3], [{
        \   'start': [0, 3],
        \   'end': [1, 3],
        \   'text': "foo\nbar"
        \ }], "abcfoo\nbar|klmn\nopqrstu\n")
        call s:expect(s:Position.cursor()).to_equal({
        \   'line': 1,
        \   'character': 3,
        \ })
      End

      It should fix cursor position (multiline -> singleline)
        call s:apply("abcedfg\nhij|klmn\nopqrstu\n", [1, 3], [{
        \   'start': [0, 3],
        \   'end': [1, 3],
        \   'text': "foo"
        \ }], "abcfoo|klmn\nopqrstu\n")
        call s:expect(s:Position.cursor()).to_equal({
        \   'line': 0,
        \   'character': 6,
        \ })
      End

    End

    " @see https://github.com/microsoft/vscode-languageserver-node/blob/master/textDocument/src/test/edits.test.ts
    Describe vscode

      It should edit inserts 1
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [0, 0],
        \   'text': 'Hello'
        \ }], "Hello012345678901234567890123456789")
      End

      It should edit inserts 2
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 1],
        \   'end': [0, 1],
        \   'text': 'Hello'
        \ }], "0Hello12345678901234567890123456789")
      End

      It should edit inserts 3
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 1],
        \   'end': [0, 1],
        \   'text': 'Hello'
        \ },{
        \   'start': [0, 1],
        \   'end': [0, 1],
        \   'text': 'World'
        \ }], "0HelloWorld12345678901234567890123456789")
      End

      It should edit inserts 4
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 2],
        \   'end': [0, 2],
        \   'text': 'One'
        \ },{
        \   'start': [0, 1],
        \   'end': [0, 1],
        \   'text': 'Hello'
        \ },{
        \   'start': [0, 1],
        \   'end': [0, 1],
        \   'text': 'World'
        \ },{
        \   'start': [0, 2],
        \   'end': [0, 2],
        \   'text': 'Two'
        \ },{
        \   'start': [0, 2],
        \   'end': [0, 2],
        \   'text': 'Three'
        \ }], "0HelloWorld1OneTwoThree2345678901234567890123456789")
      End

      It should edit replaces 1
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 3],
        \   'end': [0, 6],
        \   'text': 'Hello'
        \ }], "012Hello678901234567890123456789")
      End

      It should edit replaces 2
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 3],
        \   'end': [0, 6],
        \   'text': 'Hello'
        \ }, {
        \   'start': [0, 6],
        \   'end': [0, 9],
        \   'text': 'World'
        \ }], "012HelloWorld901234567890123456789")
      End

      It should edit replaces 3
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 3],
        \   'end': [0, 6],
        \   'text': 'Hello'
        \ }, {
        \   'start': [0, 6],
        \   'end': [0, 6],
        \   'text': 'World'
        \ }], "012HelloWorld678901234567890123456789")
      End

      It should edit replaces 4
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 6],
        \   'end': [0, 6],
        \   'text': 'World'
        \ }, {
        \   'start': [0, 3],
        \   'end': [0, 6],
        \   'text': 'Hello'
        \ }], "012HelloWorld678901234567890123456789")
      End

      It should edit replaces 5
        call s:apply("012345678901234567890123456789", [0, 0], [{
        \   'start': [0, 3],
        \   'end': [0, 3],
        \   'text': 'World'
        \ }, {
        \   'start': [0, 3],
        \   'end': [0, 6],
        \   'text': 'Hello'
        \ }], "012WorldHello678901234567890123456789")
      End

      It should edit multiline 1
        call s:apply("0\n1\n2\n3\n4", [0, 0], [{
        \   'start': [2, 0],
        \   'end': [3, 0],
        \   'text': 'Hello'
        \ }, {
        \   'start': [1, 1],
        \   'end': [1, 1],
        \   'text': 'World'
        \ }], "0\n1World\nHello3\n4")
      End

      It should throw overlap error 1
        let s:catch = v:false
        try
          call s:apply("012345678901234567890123456789", [0, 0], [{
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }, {
          \   'start': [0, 3],
          \   'end': [0, 3],
          \   'text': 'World'
          \ }])
        catch /.*/
          let s:catch = v:true
        endtry
        call s:expect(s:catch).to_equal(v:true)
      End

      It should throw overlap error 2
        let s:catch = v:false
        try
          call s:apply("012345678901234567890123456789", [0, 0], [{
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }, {
          \   'start': [0, 3],
          \   'end': [0, 4],
          \   'text': 'World'
          \ }])
        catch /.*/
          let s:catch = v:true
        endtry
        call s:expect(s:catch).to_equal(v:true)
      End

      It should delete multiline 1
        call s:apply("abcdefg\nhijklmn\nopqrstu\nvwxyg", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [1, 0],
        \   'text': ''
        \ }, {
        \   'start': [1, 0],
        \   'end': [2, 0],
        \   'text': ''
        \ }], "opqrstu\nvwxyg")
      End

      It should delete multiline 2
        call s:apply("abcdefg\nhijklmn\nopqrstu\nvwxyg", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [1, 4],
        \   'text': ''
        \ }, {
        \   'start': [1, 4],
        \   'end': [2, 4],
        \   'text': ''
        \ }], "stu\nvwxyg")
      End

      It should add/delete multiline 1
        call s:apply("abcdefg\nhijklmn\nopqrstu\nvwxyg", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [1, 0],
        \   'text': "12345\n"
        \ }, {
        \   'start': [1, 0],
        \   'end': [2, 0],
        \   'text': "67890\n"
        \ }], "12345\n67890\nopqrstu\nvwxyg")
      End

      It should add/delete multiline 2
        call s:apply("abcdefg\nhijklmn\nopqrstu\nvwxyg", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [1, 4],
        \   'text': ''
        \ }, {
        \   'start': [1, 4],
        \   'end': [2, 4],
        \   'text': ''
        \ }], "stu\nvwxyg")
      End

    End

    Describe misc

      It should safe to null
        call s:TextEdit.apply('%', v:null)
        call s:TextEdit.apply('%', [v:null])
      End

      It should preserve marks
        call s:put("a\nb\nc\nd")
        normal! 2Gma
        call s:expect(line("'a")).to_equal(2)
        call s:TextEdit.apply('%', [{
        \   'range': {
        \     'start': {
        \       'line': 0,
        \       'character': 0,
        \     },
        \     'end': {
        \       'line': 0,
        \       'character': 0,
        \     },
        \   },
        \   'newText': "\n"
        \ }])
        call s:expect(line("'a")).to_equal(3)
      End

      It should remove ending "\n" from TextEdit.newText when the end position overflowed
        call s:apply("import * as assert from 'assert';\n\nconsole.log(assert);", [0, 0], [{
        \   'start': [0, 0],
        \   'end': [3, 0],
        \   'text': "import * as assert from 'assert';\n\nconsole.log(assert);\n",
        \ }], "import * as assert from 'assert';\n\nconsole.log(assert);")
      End

      It should remove eol
        call s:apply("import * as assert from 'assert';\n\nconsole.log(assert);\n", [0, 0], [{
        \   'start': [3, 0],
        \   'end': [4, 0],
        \   'text': '',
        \ }], "import * as assert from 'assert';\n\nconsole.log(assert);")
      End

      It should insert line twice
        call s:apply('', [0, 0], [{
        \   'start': [1, 0],
        \   'end': [1, 0],
        \   'text': 'import java.util.LinkedList;',
        \ }, {
        \   'start': [0, 0],
        \   'end': [0, 0],
        \   'text': 'import java.util.ArrayList;',
        \ }], "import java.util.ArrayList;\nimport java.util.LinkedList;")
      End

    End

  End

End

"
" put
"
function! s:put(content) abort
  enew!
  let l:content = type(a:content) == type([]) ? a:content : split(a:content, "\n", v:true)
  put!=l:content
  normal! Gdd
endfunction

"
" apply
"
function! s:apply(content, position, text_edits, expected) abort
  call s:put(a:content)
  normal! ggvGzf
  call cursor(s:Position.lsp_to_vim('%', {
  \   'line': a:position[0],
  \   'character': a:position[1],
  \ }))
  call s:TextEdit.apply(bufnr('%'), map(copy(a:text_edits), { _, text_edit -> {
  \   'range': {
  \     'start': {
  \       'line': text_edit.start[0],
  \       'character': text_edit.start[1],
  \     },
  \     'end': {
  \       'line': text_edit.end[0],
  \       'character': text_edit.end[1],
  \     },
  \   },
  \   'newText': text_edit.text
  \ } }))
  call s:expect(getline('^', '$')).to_equal(split(a:expected, "\n", v:true))
endfunction

